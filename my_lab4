#include <stdio.h>
#include <time.h>
#include <stdlib.h>

typedef struct { int a, b, c, d; } int_vec;

typedef struct { float a, b, c, d; } float_vec;

typedef struct { double a, b, c, d; } double_vec;

//-------------set functions-------------------
int_vec set_int_vec(int a, int b, int c, int d)
{
  int_vec v = {a,b,c,d};
  return v;
}

float_vec set_float_vec(float a, float b, float c, float d)
{
  float_vec v = {a,b,c,d};
  return v;
}

double_vec set_double_vec(double a, double b, double c, double d)
{
  double_vec v = {a,b,c,d};
  return v;
}
//------------rand single values-----------------
int randInt()
{
  return (rand() % 10000) + 0; 
}

float randFloat()
{
  return ((float)rand()/(float)(RAND_MAX)) * 100;
}

double randDouble()
{
  return ((double)rand()/(double)(RAND_MAX)) * 100;
}
//-----------create filled arrays-------------------
int_vec createIntVec()
{
  return set_int_vec(randInt(), randInt(), randInt(), randInt());
}

float_vec createFloatVec()
{
  return set_float_vec(randFloat(), randFloat(), randFloat(), randFloat());
}

double_vec createDoubleVec()
{
  return set_double_vec(randDouble(), randDouble(), randDouble(), randDouble());
}

//------------operations-------------------
int_vec addIntVec(int_vec v1, int_vec v2)
{
  int_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "addps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}

float_vec addFloatVec(float_vec v1, float_vec v2)
{
  float_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "addps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}

double_vec addDoubleVec(double_vec v1, double_vec v2)
{
  double_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "addps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}



int_vec subIntVec(int_vec v1, int_vec v2)
{
  int_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "subps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}

float_vec subFloatVec(float_vec v1, float_vec v2)
{
  float_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "subps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}

double_vec subDoubleVec(double_vec v1, double_vec v2)
{
  double_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "subps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}



int_vec mulIntVec(int_vec v1, int_vec v2)
{
  int_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "mulps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}

float_vec mulFloatVec(float_vec v1, float_vec v2)
{
  float_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "mulps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}

double_vec mulDoubleVec(double_vec v1, double_vec v2)
{
  double_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "mulps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}


int_vec divIntVec(int_vec v1, int_vec v2)
{
  int_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "divps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}

float_vec divFloatVec(float_vec v1, float_vec v2)
{
  float_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "divps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
     );


  return result;
}

double_vec divDoubleVec(double_vec v1, double_vec v2)
{
  double_vec result;

  asm(
      "movups %1, %%xmm0 \n"
      "movups %2, %%xmm1 \n"
      "divps %%xmm1, %%xmm0 \n"
      "movups %%xmm0, %0 \n"

      : "=g"(result)
      : "g"(v1), "g"(v2)
      :
      );


  return result;
}
//------counting time--------------------------------------
double addingIntVecTime(const int NUMBER_OF_NUMBERS)
{
  double time_sum = 0.0;
  clock_t t;
for(int j = 0; j < 10; ++j)
{
  for(int i = 0; i < NUMBER_OF_NUMBERS; ++i)
  {
    int_vec v1 = createIntVec();
    int_vec v2 = createIntVec();
    t = clock();
    addIntVec(v1, v2);
    t = clock() - t;
    time_sum += ((double)t)/CLOCKS_PER_SEC;
  }
}
  time_sum /= 10;
  return time_sum;
}

double addingFloatVecTime(const int NUMBER_OF_NUMBERS)
{
  double time_sum = 0.0;
  clock_t t;
  for(int j = 0; j < 10; ++j)
  {
    for(int i = 0; i < NUMBER_OF_NUMBERS; ++i)
    {
      float_vec v1 = createFloatVec();
      float_vec v2 = createFloatVec();
      t = clock();
      addFloatVec(v1, v2);
      t = clock() - t;
      time_sum += ((double)t)/CLOCKS_PER_SEC;
    }
  }
  time_sum /= 10;
  return time_sum;
}
//===============================================================
//===============================================================
int main()
{
  const int NUMBER_OF_NUMBERS = 118192;
  
  int_vec iv = createIntVec();
  float_vec fv = createFloatVec();


//----------time.h----------------------------------
  printf("Ints adding time : %f\n", addingIntVecTime(NUMBER_OF_NUMBERS));
  printf("Floats adding time : %f\n", addingFloatVecTime(NUMBER_OF_NUMBERS));

  
}
